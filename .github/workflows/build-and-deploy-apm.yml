name: "build-and-deploy-apm"
on:
  push:
    tags:
      # 只有有tag的时候才触发部署操作
      - 'v*'

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Get version from tag
        id: vars
        run: echo "tag=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Set up Graal JDK 21
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'      # See 'Options' section below for all supported versions
          distribution: 'graalvm' # See 'Options' section below for all available distributions
          version: '21.0.6'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'maven'

      - name: Build with Maven
        run: mvn -Dmaven.test.skip=true -T 2C clean package

      - name: Generate Changelog
        run: npm install -g auto-changelog && auto-changelog

      - name: Tar arktouros-bigscreen
        run: cd arktouros-bigscreen && tar -czf ../build/arktouros-bigscreen.tar.gz .

      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create ${{ steps.vars.outputs.tag }} --notes-file CHANGELOG.md build/*.tar.gz

      - name: Unzip package
        run: tar -zxvf build/arktouros-apm-api-leaves.tar.gz -C build/

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v3

#      - name: Build and push Apm
#        id: docker_build_apm
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: ./Dockerfile-apm
#          push: true
#          platforms: linux/amd64,linux/arm64
#          tags: |
#            ${{ secrets.DOCKERHUB_USERNAME }}/arktouros-apm-server:${{ steps.vars.outputs.tag }}
#            ${{ secrets.DOCKERHUB_USERNAME }}/arktouros-apm-server:latest

      - name: Build and push arktouros-all-in-one
        id: docker_build_all_in_one
        uses: docker/build-push-action@v6
        with:
          context: ./arktouros-image
          file: ./arktouros-image/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
              ${{ secrets.DOCKERHUB_USERNAME }}/arktouros-all-in-one:${{ steps.vars.outputs.tag }}
              ${{ secrets.DOCKERHUB_USERNAME }}/arktouros-all-in-one:latest
            


#  deploy-on-remote:
#    runs-on: ubuntu-latest
#    needs: build-and-push-image
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: 传输docker-compose到服务器
#        run: >
#          sshpass -p ${{secrets.REMOTE_PWD}}
#          scp -r -o StrictHostKeyChecking=no deploy/docker-compose.yaml
#          root@${{secrets.REMOTE_IP}}:/root/arktouros
#
#      - name: 传输部署脚本到服务器
#        run: >
#          sshpass -p ${{secrets.REMOTE_PWD}}
#          scp -r -o StrictHostKeyChecking=no deploy/run-backend.sh
#          root@${{secrets.REMOTE_IP}}:/root/arktouros
#
#  deploy-on-another-remote:
#    runs-on: ubuntu-latest
#    needs: build-and-push-image
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: 写pem到临时文件
#        run: echo "${{secrets.REMOTE_KEY}}" > private_key.pem && chmod 600 private_key.pem
#
#      - name: 传输docker-compose到服务器
#        run: >
#          scp -i private_key.pem -r -o StrictHostKeyChecking=no
#          deploy/docker-compose.yaml
#          root@${{secrets.REMOTE_IP_1}}:/root/arktouros
#
#      - name: 传输部署脚本到服务器
#        run: >
#          scp -i private_key.pem -r -o StrictHostKeyChecking=no
#          deploy/run-backend.sh
#          root@${{secrets.REMOTE_IP_1}}:/root/arktouros
#
#      - name: 授权并执行部署脚本
#        run: >
#          ssh -i private_key.pem -o StrictHostKeyChecking=no root@${{secrets.REMOTE_IP_1}}
#          "chmod +x /root/arktouros/run-backend.sh && /root/arktouros/run-backend.sh"

#  analyze-with-sonarqube:
#    name: analyze with sonarqube
#    runs-on: ubuntu-latest
#    # 需要用新代码和新环境来跑UT
#    permissions: read-all
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          submodules: 'recursive'
#
#      - name: Set up Graal JDK 21
#        uses: graalvm/setup-graalvm@v1
#        with:
#          java-version: '21'      # See 'Options' section below for all supported versions
#          distribution: 'graalvm' # See 'Options' section below for all available distributions
#          version: '21.0.2'
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          cache: 'maven'
#
#      - name: Cache SonarQube packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#
#      - name: 交给sonarqube扫描
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#          ELASTICSEARCH_SERVERURL: ${{ secrets.ELASTICSEARCH_SERVERURL }}
#          ELASTICSEARCH_PASSWORD: ${{ secrets.ELASTICSEARCH_PASSWORD }}
#          ELASTICSEARCH_CA: ${{ secrets.ELASTICSEARCH_CA }}
#        # UT报错不阻塞sonar扫描 使用内存型数据库避免并行执行问题
#        run: >
#          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
#          -Dsonar.coverage.jacoco.xmlReportPaths=./arktouros-jacoco-aggregation/target/site/jacoco-aggregate/jacoco.xml
#          -Dsonar.projectKey=WangMinan_Arktouros_5cf7fce8-6c16-4aef-b255-7105807485bf
#          -Dsonar.projectName='Arktouros'
#
#      # 删除nginx原有目录下内容
#      - name: 清空nginx目录
#        run: >
#          sshpass -p ${{secrets.REMOTE_PWD}}
#          ssh -o StrictHostKeyChecking=no root@${{secrets.NGINX_IP}}
#          "rm -rf /usr/local/nginx/html/jacoco/*"
#
#      # 理论上直接覆盖就可以了 我们先试试
#      - name: 转发jacoco到nginx
#        run: >
#          sshpass -p ${{secrets.REMOTE_PWD}}
#          scp -r -o StrictHostKeyChecking=no
#          arktouros-jacoco-aggregation/target/site/jacoco-aggregate/*
#          root@${{secrets.NGINX_IP}}:/usr/local/nginx/html/jacoco
#
#      - name: 压缩UT报告为一个包
#        run: >
#          tar -czvf ./jacoco-aggregate.tar.gz ./arktouros-jacoco-aggregation/target/site/jacoco-aggregate
#
#      # 发送邮件 提醒sonarqube扫描完成
#      - name: 发送提醒邮件
#        uses: dawidd6/action-send-mail@v3
#        with:
#          server_address: smtp-mail.outlook.com
#          server_port: 587
#          secure: false # 看源码 置true时默认走465 其实这个逻辑是有问题的
#          # Optional (recommended) mail server username:
#          username: ${{secrets.MAIL_USERNAME}}
#          # Optional (recommended) mail server password:
#          password: ${{secrets.MAIL_PASSWORD}}
#          # Required mail subject:
#          subject: Arktouros APM 构建测试CI完成
#          # Required recipients' addresses:
#          to: wangminan0811@hotmail.com
#          # Required sender full name (address can be skipped):
#          from: Wang Minan # <user@example.com>
#          # Optional plain body:
#          body: Build job of ${{github.repository}} completed successfully!
#          attachments: ./jacoco-aggregate.tar.gz
